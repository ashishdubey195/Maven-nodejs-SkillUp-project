---
- hosts: all
  become: true
  tasks:
    - name: update package cache
      apt: update_cache=yes
    - name: Ensure required packages are installed
      apt:
        name:
          - wget
          - tar
          - curl
        state: present
    - name: Ensure Jenkins user can run all commands without a password
      lineinfile:
        path: /etc/sudoers
        line: 'jenkins ALL=NOPASSWD:ALL'
        state: present
    - name: Install OpenJDK 17 JDK
      apt: name=openjdk-17-jdk state=present
    - name: Set JAVA_HOME using template
      template:
       src: templates/java_home.j2
       dest: root/
    - name: Download Maven
      get_url:
        url: https://dlcdn.apache.org/maven/maven-3/3.9.8/binaries/apache-maven-3.9.8-bin.tar.gz
        dest: /tmp/apache-maven-3.9.8-bin.tar.gz

    - name: Extract Maven
      unarchive:
        src: /tmp/apache-maven-3.9.8-bin.tar.gz
        dest: /opt
        remote_src: yes

    - name: Set up Maven environment variables
      copy:
        content: |
          export M2_HOME=/opt/apache-maven-3.9.8
          export MAVEN_HOME=/opt/apache-maven-3.9.8
          export PATH=$PATH:/opt/apache-maven-3.9.8/bin
        dest: /usr/share/maven
        mode: '0755'


    - name: Add Nodesource repository for Node.js
      shell: curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -


    - name: Install Node.js
      apt:
        name: nodejs
        state: present
    - name: Install npm
      apt:
        name: npm
        state: present
    - name: Verify Maven installation
      shell: . /usr/share/maven && mvn -version
      register: maven_version

    - debug:
        msg: "{{ maven_version.stdout }}"

    - name: Verify Node.js installation
      command: node -v
      register: node_version

    - debug:
        msg: "{{ node_version.stdout }}"

    - name: Verify npm installation
      command: npm -v
      register: npm_version

    - debug:
        msg: "{{ npm_version.stdout }}"

    - name: Ensure the application directory exists
      file:
        path: /root/myapp
        state: directory

    - name: Initialize npm project
      shell: npm init -y
      args:
        chdir: /root/myapp
    - name: Install express package
      npm:
        name: express
        path: /root/myapp
        state: present

    - name: List the contents of the application directory
      command: ls -l /root/myapp
    - name: Create index.js file
      copy:
        dest: /root/myapp/index.js
        content: |
          const express = require('express');
          const app = express();
          const port = 3000;

          app.get('/', (req, res) => {
            res.send('Hello World!');
          });

          app.listen(port, () => {
            console.log(`Example app listening on port ${port}`);
          });
    - name: Install mocha as a development dependency
      shell: npm install --save-dev mocha
      args:
        chdir: /root/myapp
    - name: Update package.json file
      copy:
        dest: /root/myapp/package.json
        content: |
          {
            "name": "apps",
            "version": "1.0.0",
            "description": "",
            "main": "index.js",
            "scripts": {
              "test": "mocha",
              "build": "echo 'Running Build script'"
            },
            "author": "",
            "license": "ISC",
            "dependencies": {
              "express": "^4.18.2"
            },
            "devDependencies": {
              "mocha": "^10.2.0"
            }
          }
    - name: Create test directory
      file:
        path: /root/myapp/test
        state: directory

    - name: Create mytest.test.js file
      file:
        path: /root/myapp/test/mytest.test.js
        state: touch

    - name: Run npm test
      shell: npm test
      args:
        chdir: /root/myapp
    - name: Run npm build
      shell: npm run build
      args:
        chdir: /root/myapp
